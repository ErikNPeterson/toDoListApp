{"ast":null,"code":"import _regeneratorRuntime from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/vagrant/toDoListApp/client/src/App.js\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($id: ID!) {\\n    removeTodo(id: $id)\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($id: ID!, $complete: Boolean!) {\\n    updateTodo(id: $id, complete: $complete)\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n{\\n  todos{\\n    id\\n    text\\n    complete\\n  }\\n} \\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport gql from \"graphql-tag\";\nimport { graphql, compose } from 'react-apollo';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nvar TodosQuery = gql(_templateObject());\nvar UpdateMutation = gql(_templateObject2());\nvar RemoveMutation = gql(_templateObject3());\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.updateTodo =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(todo) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", function () {\n                  _this.props.updateTodo({\n                    variables: {\n                      id: todo.id,\n                      complete: !todo.complete\n                    },\n                    update: function update(store) {\n                      // Read the data from our cache for this query.\n                      var data = store.readQuery({\n                        query: TodosQuery\n                      }); // Add our comment from the mutation to the end.\n\n                      data.todos = data.todos.map(function (x) {\n                        return x.id === todo.id ? _objectSpread({}, todo, {\n                          complete: !todo.complete\n                        }) : x;\n                      }); // Write our data back to the cache.\n\n                      store.writeQuery({\n                        query: TodosQuery,\n                        data: data\n                      });\n                    }\n                  });\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.removeTodo = function (todo) {\n      _this.props.removeTodo({\n        variables: {\n          id: todo.id\n        },\n        update: function update(store) {\n          // Read the data from our cache for this query.\n          var data = store.readQuery({\n            query: TodosQuery\n          }); // Add our comment from the mutation to the end.\n\n          data.todos = data.todos.map(function (x) {\n            return x.id === todo.id ? _objectSpread({}, todo, {\n              complete: !todo.complete\n            }) : x;\n          }); // Write our data back to the cache.\n\n          store.writeQuery({\n            query: TodosQuery,\n            data: data\n          });\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props$data = this.props.data,\n          loading = _this$props$data.loading,\n          todos = _this$props$data.todos;\n\n      if (loading) {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          margin: \"auto\",\n          width: 400\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        elevation: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, todos.map(function (todo) {\n        return React.createElement(ListItem, {\n          key: todo.id,\n          role: undefined,\n          dense: true,\n          button: true,\n          onClick: function onClick() {\n            return _this2.updateTodo(todo);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          checked: todo.complete,\n          tabIndex: -1,\n          disableRipple: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }), React.createElement(ListItemText, {\n          primary: todo.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }), React.createElement(ListItemSecondaryAction, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, React.createElement(IconButton, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, React.createElement(CloseIcon, {\n          onClick: function onClick() {\n            return _this2.removeTodo(todo);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }))));\n      })))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default compose(graphql(RemoveMutation, {\n  name: 'removeTodo'\n}), graphql(UpdateMutation, {\n  name: \"updateTodo\"\n}), graphql(TodosQuery))(App);","map":{"version":3,"sources":["/vagrant/toDoListApp/client/src/App.js"],"names":["React","Component","gql","graphql","compose","Paper","List","ListItem","ListItemSecondaryAction","ListItemText","Checkbox","IconButton","CloseIcon","TodosQuery","UpdateMutation","RemoveMutation","App","updateTodo","todo","props","variables","id","complete","update","store","data","readQuery","query","todos","map","x","writeQuery","removeTodo","loading","display","margin","width","undefined","text","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport gql from \"graphql-tag\";\nimport {graphql, compose} from 'react-apollo';\nimport Paper from '@material-ui/core/Paper';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst TodosQuery = gql`\n{\n  todos{\n    id\n    text\n    complete\n  }\n} \n`;\n\nconst UpdateMutation = gql`\n  mutation($id: ID!, $complete: Boolean!) {\n    updateTodo(id: $id, complete: $complete)\n  }\n`;\n\nconst RemoveMutation = gql`\n  mutation($id: ID!) {\n    removeTodo(id: $id)\n  }\n`;\nclass App extends Component {\n    updateTodo = async todo => () => {\n    this.props.updateTodo({\n      variables: {\n        id: todo.id,  \n        complete: !todo.complete\n      },\n      update: store => {\n        // Read the data from our cache for this query.\n        const data = store.readQuery({ query: TodosQuery });\n        // Add our comment from the mutation to the end.\n        data.todos = data.todos.map(x => x.id === todo.id ? ({\n          ...todo,\n          complete: !todo.complete,\n        }) : x)\n        // Write our data back to the cache.\n        store.writeQuery({ query: TodosQuery, data });\n      },\n    });\n  };\n\n  removeTodo = todo => {\n    this.props.removeTodo({\n      variables: {\n        id: todo.id,  \n      },\n      update: store => {\n        // Read the data from our cache for this query.\n        const data = store.readQuery({ query: TodosQuery });\n        // Add our comment from the mutation to the end.\n        data.todos = data.todos.map(x => x.id === todo.id ? ({\n          ...todo,\n          complete: !todo.complete,\n        }) : x)\n        // Write our data back to the cache.\n        store.writeQuery({ query: TodosQuery, data });\n      },\n    });\n  }\n\n  render() {\n    const {data: {loading, todos} } = this.props;\n    if(loading){\n      return null;\n    }\n\n    return (\n    <div style={{ display: \"flex\"}}>\n      <div style={{ margin: \"auto\", width: 400 }} >\n      <Paper elevation={1}>\n\n              <List>\n          {todos.map(todo => (\n            <ListItem\n              key={todo.id}\n              role={undefined}\n              dense\n              button\n              onClick={() => this.updateTodo(todo)}\n            >\n              <Checkbox\n                checked={todo.complete}\n                tabIndex={-1}\n                disableRipple\n              />\n              <ListItemText primary={todo.text} />\n              <ListItemSecondaryAction>\n                <IconButton>\n                  <CloseIcon onClick={() => this.removeTodo(todo)} />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n\n      </div>\n    </div>\n    );\n  }\n}\n\n\n\nexport default compose(\n  graphql(RemoveMutation, {name: 'removeTodo'}),\n  graphql(UpdateMutation, {name:\"updateTodo\"}),\n  graphql(TodosQuery))(App);\n"]},"metadata":{},"sourceType":"module"}