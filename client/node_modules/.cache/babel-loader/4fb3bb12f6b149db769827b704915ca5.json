{"ast":null,"code":"import _regeneratorRuntime from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/vagrant/toDoListApp/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/vagrant/toDoListApp/client/src/App.js\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($id: ID!) {\\n    removeTodo(id: $id)\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($id: ID!, $complete: Boolean!) {\\n    updateTodo(id: $id, complete: $complete)\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n{\\n  todos {\\n    id\\n    text\\n    complete\\n  }\\n} \\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// page is not updating... is it possible that I'm missing the Apollo graphql file ?\nimport React, { Component } from 'react';\nimport gql from \"graphql-tag\";\nimport { graphql, compose } from 'react-apollo';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close'; // this says comment on the video\n\nimport Form from './Form';\nvar TodosQuery = gql(_templateObject());\nvar UpdateMutation = gql(_templateObject2());\nvar RemoveMutation = gql(_templateObject3());\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.updateTodo =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(todo) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.props.updateTodo({\n                  variables: {\n                    id: todo.id,\n                    complete: !todo.complete\n                  },\n                  update: function update(store) {\n                    // Read the data from our cache for this query.\n                    var data = store.readQuery({\n                      query: TodosQuery\n                    }); // Add our comment from the mutation to the end.\n\n                    data.todos = data.todos.map(function (x) {\n                      return x.id === todo.id ? _objectSpread({}, todo, {\n                        complete: !todo.complete\n                      }) : x;\n                    }); // Write our data back to the cache.\n\n                    store.writeQuery({\n                      query: TodosQuery,\n                      data: data\n                    });\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.removeTodo =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(todo) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.props.removeTodo({\n                  variables: {\n                    id: todo.id\n                  },\n                  update: function update(store) {\n                    // Read the data from our cache for this query.\n                    var data = store.readQuery({\n                      query: TodosQuery\n                    }); // Add our comment from the mutation to the end.\n\n                    data.todos = data.todos.filter(function (x) {\n                      return x.id !== todo.id;\n                    }); // Write our data back to the cache.\n\n                    store.writeQuery({\n                      query: TodosQuery,\n                      data: data\n                    });\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props$data = this.props.data,\n          loading = _this$props$data.loading,\n          todos = _this$props$data.todos;\n\n      if (loading) {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          margin: \"auto\",\n          width: 400\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        elevation: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), todos.map(function (todo) {\n        return React.createElement(ListItem, {\n          key: todo.id,\n          role: undefined,\n          dense: true,\n          button: true,\n          onClick: function onClick() {\n            return _this2.updateTodo(todo);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          checked: todo.complete // onClick={() => this.updateTodo(todo.complete)}\n          ,\n          tabIndex: -1,\n          disableRipple: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }), React.createElement(ListItemText, {\n          primary: todo.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }), React.createElement(ListItemSecondaryAction, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(IconButton, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(CloseIcon, {\n          onClick: function onClick() {\n            return _this2.removeTodo(todo);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }))));\n      })))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default compose(graphql(RemoveMutation, {\n  name: 'removeTodo'\n}), graphql(UpdateMutation, {\n  name: 'updateTodo'\n}), graphql(TodosQuery))(App);","map":{"version":3,"sources":["/vagrant/toDoListApp/client/src/App.js"],"names":["React","Component","gql","graphql","compose","Paper","List","ListItem","ListItemSecondaryAction","ListItemText","Checkbox","IconButton","CloseIcon","Form","TodosQuery","UpdateMutation","RemoveMutation","App","updateTodo","todo","props","variables","id","complete","update","store","data","readQuery","query","todos","map","x","writeQuery","removeTodo","filter","loading","display","margin","width","undefined","text","name"],"mappings":"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","sourcesContent":["// page is not updating... is it possible that I'm missing the Apollo graphql file ?\n\nimport React, { Component } from 'react';\nimport gql from \"graphql-tag\";\nimport {graphql, compose} from 'react-apollo';\nimport Paper from '@material-ui/core/Paper';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close'; // this says comment on the video\nimport Form from './Form';\n\nconst TodosQuery = gql`\n{\n  todos {\n    id\n    text\n    complete\n  }\n} \n`;\n\nconst UpdateMutation = gql`\n  mutation($id: ID!, $complete: Boolean!) {\n    updateTodo(id: $id, complete: $complete)\n  }\n`;\n\nconst RemoveMutation = gql`\n  mutation($id: ID!) {\n    removeTodo(id: $id)\n  }\n`;\n\nclass App extends Component { \n    updateTodo = async todo => {\n    await this.props.updateTodo({\n      variables: {\n        id: todo.id,  \n        complete: !todo.complete\n      },\n      update: store => {\n        // Read the data from our cache for this query.\n        const data = store.readQuery({ query: TodosQuery });\n        // Add our comment from the mutation to the end.\n        data.todos = data.todos.map(\n          x => \n            x.id === todo.id \n              ? {\n                  ...todo,\n                  complete: !todo.complete,\n                }\n             : x\n          );\n        // Write our data back to the cache.\n        store.writeQuery({ query: TodosQuery, data });\n      }\n    });\n  };\n\n  removeTodo = async todo => {\n    await this.props.removeTodo({\n      variables: {\n        id: todo.id,  \n      },\n      update: store => {\n        // Read the data from our cache for this query.\n        const data = store.readQuery({ query: TodosQuery });\n        // Add our comment from the mutation to the end.\n        data.todos = data.todos.filter(x => x.id !== todo.id)\n        // Write our data back to the cache.\n        store.writeQuery({ query: TodosQuery, data });\n      },\n    });\n  }\n\n  render() {\n    const {\n      data: {loading, todos} \n    } = this.props;\n    if(loading){\n      return null;\n    }\n\n    return (\n    <div style={{ display: \"flex\"}}>\n      <div style={{ margin: \"auto\", width: 400 }} >\n      <Paper elevation={1}>\n        <List>\n          <Form/>\n          {todos.map(todo => (\n            <ListItem\n              key={todo.id}\n              role={undefined}\n              dense\n              button\n              onClick={() => this.updateTodo(todo)} \n            >\n              <Checkbox\n                checked={todo.complete}\n                // onClick={() => this.updateTodo(todo.complete)}\n                tabIndex={-1}\n                disableRipple\n              />\n              <ListItemText primary={todo.text} />\n              <ListItemSecondaryAction>\n                <IconButton>\n                  <CloseIcon onClick={() => this.removeTodo(todo)} />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n\n      </div>\n    </div>\n    );\n  }\n}\n\n\n\nexport default compose(\n  graphql(RemoveMutation, {name: 'removeTodo'}),\n  graphql(UpdateMutation, {name:'updateTodo'}),\n  graphql(TodosQuery))(App);\n"]},"metadata":{},"sourceType":"module"}